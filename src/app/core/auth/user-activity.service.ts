import { Injectable } from '@angular/core';
import { BehaviorSubject, fromEvent, merge, timer } from 'rxjs';
import { debounceTime, tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class UserActivityService {
  private readonly INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes (r√©duit pour plus de r√©activit√©)
  private readonly LONG_INACTIVITY_TIMEOUT = 30 * 60 * 1000; // 30 minutes (r√©duit pour plus de r√©activit√©)

  private lastActivity = new Date();
  private activityTimer?: any;
  private longInactivityTimer?: any;

  // Observable pour l'√©tat d'activit√©
  private inactivitySubject = new BehaviorSubject<boolean>(false);
  public inactivity$ = this.inactivitySubject.asObservable();

  // Observable pour l'inactivit√© prolong√©e
  private longInactivitySubject = new BehaviorSubject<boolean>(false);
  public longInactivity$ = this.longInactivitySubject.asObservable();

  constructor() {
    this.initializeActivityDetection();
  }

  /**
   * Initialise la d√©tection d'activit√© utilisateur
   */
  private initializeActivityDetection(): void {
    // √âv√©nements √† surveiller pour d√©tecter l'activit√©
    const activityEvents = [
      'mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'touchmove',
      'click', 'keydown', 'keyup', 'focus', 'blur'
    ];

    // Cr√©er un observable qui √©coute tous les √©v√©nements d'activit√©
    const activityObservable = merge(
      ...activityEvents.map(event => fromEvent(document, event))
    );

    // D√©bouncer les √©v√©nements pour √©viter trop d'appels
    activityObservable.pipe(
      debounceTime(1000), // Attendre 1 seconde entre les √©v√©nements
      tap(() => this.onUserActivity())
    ).subscribe();

    // D√©marrer le timer d'inactivit√©
    this.resetInactivityTimer();
  }

  /**
   * Appel√© quand une activit√© utilisateur est d√©tect√©e
   */
  private onUserActivity(): void {
    this.lastActivity = new Date();
    
    // R√©initialiser l'√©tat d'inactivit√© si l'utilisateur √©tait inactif
    if (this.inactivitySubject.value) {
      this.inactivitySubject.next(false);
    }
    
    if (this.longInactivitySubject.value) {
      this.longInactivitySubject.next(false);
    }

    // R√©initialiser les timers
    this.resetInactivityTimer();
  }

  /**
   * R√©initialise le timer d'inactivit√©
   */
  private resetInactivityTimer(): void {
    // Nettoyer les timers existants
    if (this.activityTimer) {
      clearTimeout(this.activityTimer);
    }
    if (this.longInactivityTimer) {
      clearTimeout(this.longInactivityTimer);
    }

    // Timer pour inactivit√© normale (15 minutes)
    this.activityTimer = setTimeout(() => {
      this.inactivitySubject.next(true);
      console.log('‚è∞ Utilisateur inactif depuis 15 minutes');
    }, this.INACTIVITY_TIMEOUT);

    // Timer pour inactivit√© prolong√©e (30 minutes) 
    this.longInactivityTimer = setTimeout(() => {
      this.longInactivitySubject.next(true);
      console.log('üîí Utilisateur inactif depuis 30 minutes - Lock screen recommand√©');
    }, this.LONG_INACTIVITY_TIMEOUT);
  }

  /**
   * Obtient le temps depuis la derni√®re activit√© en millisecondes
   */
  getTimeSinceLastActivity(): number {
    return new Date().getTime() - this.lastActivity.getTime();
  }

  /**
   * V√©rifie si l'utilisateur est inactif
   */
  isUserInactive(): boolean {
    return this.inactivitySubject.value;
  }

  /**
   * V√©rifie si l'utilisateur a une inactivit√© prolong√©e
   */
  isUserLongInactive(): boolean {
    return this.longInactivitySubject.value;
  }

  /**
   * Force le reset de l'activit√© (utile pour les connexions, etc.)
   */
  forceActivityReset(): void {
    this.onUserActivity();
  }

  /**
   * Arr√™te la d√©tection d'activit√©
   */
  stopActivityDetection(): void {
    if (this.activityTimer) {
      clearTimeout(this.activityTimer);
    }
    if (this.longInactivityTimer) {
      clearTimeout(this.longInactivityTimer);
    }
  }
}
